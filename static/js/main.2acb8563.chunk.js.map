{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["urlToGetAuthToken","API_FOLDERS","Home","href","LoginButton","role","raised","className","React","Component","Header","props","to","FolderPath","this","folder","map","item","index","key","icon","slice","join","onClick","link","ItemsList","disk","name","type","graphic","primaryText","file","Client","state","arrayDisk","folder_name","length","folder_path","replace","FOLDER_URL","headers","Headers","token","init","fetchFolder","a","fetch","response","json","_embedded","items","forEach","arrayFolders","path","split","setState","event","preventDefault","target","getFolder","file_name","FILE_URL","window","location","download","fetchFile","changeFolders","bind","getFile","App","tokenData","exec","document","hash","setCookie","cookie_token","getCookie","date","Date","setDate","getDate","collectCookie","cookie","matches","match","RegExp","decodeURIComponent","undefined","exact","render","Boolean","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2acb8563.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Switch, Route, Link } from 'react-router-dom'\nimport Button from '@material/react-button';\nimport '@material/react-button/dist/button.css';\nimport List, { ListItem, ListItemText, ListItemGraphic } from '@material/react-list';\nimport '@material/react-list/dist/list.css';\nimport MaterialIcon from '@material/react-material-icon';\n\nconst appId = \"58d159d75dca404e89e361291e0ce147\";\nconst urlToGetAuthToken = \"https://oauth.yandex.ru/authorize?response_type=token&client_id=\" + appId;\nconst API_FOLDERS = \"https://cloud-api.yandex.net/v1/disk/resources?path=\";\nconst API_FILES = \"https://cloud-api.yandex.net/v1/disk/resources/download?path=\";\n\nconst Home = () => (\n  <div>\n    <h2>Добро пожаловать в Yandex Диск Client</h2>\n    <p>Yandex Диск — это сервис хранения, редактирования и синхронизации файлов.</p>\n    <p>Для получения доступа к файлам на Диске нажмите <a href={urlToGetAuthToken}>Получить доступ</a> и пройдите авторизацию.</p>\n  </div>\n)\n\nclass LoginButton extends React.Component {\n  render() {\n    return (\n      <a href={urlToGetAuthToken} role=\"button\">\n        <Button raised className='button-alternate'>\n          Получить доступ\n        </Button>\n      </a>\n    )\n  }\n}\n\nclass Header extends React.Component {\n  constructor(props) {\n    super();\n  }\n\n  render() {\n    return (\n      <header>\n        <nav>\n          <Link to='/'>Главная</Link>\n          <Link to='/client-disk'>Диск</Link>\n          <LoginButton />\n        </nav>\n      </header>\n    )\n  }\n}\n\nclass FolderPath extends React.Component {\n  render() {\n    return (\n      <div>\n        <h3>Файлы:</h3>\n        {this.props.folder.map((item, index) =>\n          (item && <span key={item}><MaterialIcon icon='keyboard_arrow_right' />\n            <a href={this.props.folder.slice(0, index + 1).join('/')} onClick={this.props.link}>{item}</a>\n          </span>))}\n      </div>\n    );\n  }\n}\n\nconst ItemsList = (props) => {\n  return props.disk.map((item) => (\n    <div key={item.name}>\n      {item.type === 'dir' ?\n        <ListItem onClick={() => props.folder(item.name)}>\n          <ListItemGraphic graphic={<MaterialIcon icon='folder' />} />\n          <ListItemText primaryText={item.name} />\n        </ListItem> :\n        <ListItem onClick={() => props.file(item.name)}>\n          <ListItemGraphic graphic={<MaterialIcon icon='insert_drive_file' />} />\n          <ListItemText primaryText={item.name} />\n        </ListItem>\n      }\n    </div >\n  ));\n}\n\nclass Client extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      folder: [],\n      disk: []\n    };\n    this.arrayDisk = [];\n  }\n\n  getFolder(folder_name = '') {\n    this.arrayDisk.length = 0;\n    const folder_path = this.state.folder.join('/').replace('disk:/', '') + '/';\n\n    const FOLDER_URL = API_FOLDERS + folder_path + folder_name + \"&limit=10000\";\n    const headers = new Headers({\n      'Authorization': `OAuth ` + this.props.token\n    });\n    const init = {\n      headers: headers\n    };\n\n    const fetchFolder = async () => {\n      const response = await fetch(FOLDER_URL, init);\n      const json = await response.json();\n      json._embedded.items.forEach((item, index) => { this.arrayDisk[index] = item; });\n      const arrayFolders = json._embedded.path.split(\"/\");\n      this.setState({ disk: this.arrayDisk, folder: arrayFolders });\n    }\n\n    fetchFolder();\n  }\n\n  changeFolders(event) {\n    event.preventDefault();\n    const arrayFolders = event.target.href.split(\"/\");\n    this.setState({\n      folder: arrayFolders\n    }, () => this.getFolder(''));\n  }\n\n  getFile(file_name) {\n    const folder_path = this.state.folder.join('/').replace('disk:/', '') + '/';\n    const FILE_URL = API_FILES + folder_path + file_name;\n    const headers = new Headers({\n      'Authorization': `OAuth ` + this.props.token\n    });\n    const init = {\n      headers: headers\n    };\n\n    const fetchFile = async () => {\n      const response = await fetch(FILE_URL, init);\n      const json = await response.json();\n      window.location = json.href;\n      this.setState({ download: json.href })\n    }\n    fetchFile();\n  }\n\n  componentDidMount() {\n    this.setState({\n      folder: ['disk:/']\n    }, () => this.getFolder(''));\n  }\n\n  render() {\n    if (this.props.token === \"\") {\n      return (\n        <div>\n          Вы не прошли авторизацию. Необходимо получить доступ к Диску.\n        </div>\n      )\n    }\n    else {\n      return (\n        <div>\n          <FolderPath\n            folder={this.state.folder}\n            link={this.changeFolders.bind(this)} />\n          <List>\n            <ItemsList\n              disk={this.state.disk}\n              folder={this.getFolder.bind(this)}\n              file={this.getFile.bind(this)}\n            />\n          </List>\n        </div>\n      )\n    }\n  }\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = { token: \"\" };\n  }\n\n  componentDidMount() {\n    const tokenData = /access_token=([^&]+)/.exec(document.location.hash);\n    const token = tokenData ? tokenData[1] : null;\n    if (token) {\n      this.setState({ token: token });\n      this.setCookie(\"token\", token);\n    }\n    else {\n      const cookie_token = this.getCookie(\"token\");\n      if (cookie_token) {\n        this.setState({ token: cookie_token });\n        return;\n      }\n    }\n  }\n\n  setCookie(name, token) {\n    var date = new Date();\n    date.setDate(date.getDate() + 365);\n    const collectCookie = name + \"=\" + token + \"; path=/; expires=\" + date;\n    document.cookie = collectCookie;\n  }\n\n  getCookie(name) {\n    var matches = document.cookie.match(new RegExp(\"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"));\n    return matches ? decodeURIComponent(matches[1]) : undefined;\n  }\n\n  render() {\n    const token = this.state.token;\n    return (\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path='/' render={() => <Home token={token} />} />\n          <Route path='/client-disk' render={() => {\n            if (token !== \"\")\n              return <Client token={token} />\n            else\n              return <div>Вы не прошли авторизацию. Необходимо получить доступ к Диску.</div>\n          }} />\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render((\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  ), document.getElementById('root'))\n\nserviceWorker.unregister(); //Not PWA \n"],"sourceRoot":""}